#!/usr/bin/env python
'''
import commands, os, string

program = raw_input("Enter the name of the program to check: ")

try:
    #perform a ps command and assign results to a list
    output = commands.getoutput("ps -f|grep " + program)
    proginfo = string.split(output)

    #display results
    print "\n\
    Full path:\t\t", proginfo[5], "\n\
    Owner:\t\t\t", proginfo[0], "\n\
    Process ID:\t\t", proginfo[1], "\n\
    Parent process ID:\t", proginfo[2], "\n\
    Time started:\t\t", proginfo[4]
except:
    print "There was a problem with the program."
'''

'''import commands, os, string
output = commands.getoutput("ps -f|grep ")
proginfo = string.split(output)

print proginfo'''

from subprocess import Popen, PIPE
from re import split
from sys import stdout

class Process(object):
    ''' Data structure for a processes . The class properties are
    process attributes '''
    def __init__(self, proc_info):
        self.user 	= proc_info[0]
        self.pid 	= proc_info[1]
        self.cpu 	= proc_info[2]
        self.mem 	= proc_info[3]
        self.vsz 	= proc_info[4]
        self.rss 	= proc_info[5]
        self.tty 	= proc_info[6]
        self.stat 	= proc_info[7]
        self.start 	= proc_info[8]
        self.time 	= proc_info[9]
        self.cmd 	= proc_info[10]
 
    def to_str(self):
        ''' Returns a string containing minimalistic info
        about the process : user, pid, and command '''
        return '%s %s %s' % (self.user, self.pid, self.cmd)

def get_process_list():
    ''' Return a list [] of Proc objects representing the active
    process list list '''
    proc_list = []
    sub_proc = Popen(['ps', 'aux'], shell=False, stdout=PIPE)
    #Discard the first line (ps aux header)
    sub_proc.stdout.readline()
    for line in sub_proc.stdout:
        #The separator for splitting is 'variable number of spaces'
        proc_info = split(" *", line)
        proc_list.append(Process(proc_info))
    return proc_list

list = get_process_list()

for process in list:
	print process.stat


#p.command
#pwd.getpwuid(p.euid).pw_name
#p.children()
#[psi.process.Process(pid=30381), psi.process.Process(pid=16111), psi.process.Process(pid=30034)]
#str(p.cputime.timedelta())
#str(p.start_time.datetime())
#str(psi.boottime().datetime())